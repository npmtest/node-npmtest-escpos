{"/home/travis/build/npmtest/node-npmtest-escpos/test.js":"/* istanbul instrument in package npmtest_escpos */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-escpos/lib.npmtest_escpos.js":"/* istanbul instrument in package npmtest_escpos */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_escpos = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_escpos = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-escpos/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-escpos && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_escpos */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_escpos\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_escpos.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_escpos.rollup.js'] =\n            local.assetsDict['/assets.npmtest_escpos.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_escpos.__dirname + '/lib.npmtest_escpos.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-escpos/node_modules/escpos/index.js":"'use strict';\n/**\n * Adapters\n */\nexports.USB     = require('./adapter/usb');\nexports.Serial  = require('./adapter/serial');\nexports.Network = require('./adapter/network');\nexports.Console = require('./adapter/console');\n/**\n * Printer Supports\n */\nexports.Image   = require('./image');\nexports.Printer = require('./printer');\nexports.Adapter = require('./adapter');\nexports.command = require('./commands');","/home/travis/build/npmtest/node-npmtest-escpos/node_modules/escpos/adapter/usb.js":"'use strict';\nconst os           = require('os');\nconst usb           = require('usb');\nconst util          = require('util');\nconst EventEmitter  = require('events');\n\n/**\n * [USB Class Codes ]\n * @type {Object}\n * @docs http://www.usb.org/developers/defined_class\n */\nconst IFACE_CLASS = {\n  AUDIO  : 0x01,\n  HID    : 0x03,\n  PRINTER: 0x07,\n  HUB    : 0x09\n};\n\n/**\n * [function USB]\n * @param  {[type]} vid [description]\n * @param  {[type]} pid [description]\n * @return {[type]}     [description]\n */\nfunction USB(vid, pid){\n  EventEmitter.call(this);\n  var self = this;\n  this.device = null;\n  if(vid && pid){\n    this.device = usb.findByIds(vid, pid);\n  }else{\n    var devices = USB.findPrinter();\n    if(devices && devices.length)\n      this.device = devices[0];\n  }\n  if (!this.device)\n    throw new Error('Can not find printer');\n\n  usb.on('detach', function(device){\n    if(device == self.device) {\n      self.emit('detach'    , device);\n      self.emit('disconnect', device);\n      self.device = null;\n    }\n  });\n  return this;\n};\n\n/**\n * [findPrinter description]\n * @return {[type]} [description]\n */\nUSB.findPrinter = function(){\n  return usb.getDeviceList().filter(function(device){\n    try{\n      return device.configDescriptor.interfaces.filter(function(iface){\n        return iface.filter(function(conf){\n          return conf.bInterfaceClass === IFACE_CLASS.PRINTER;\n        }).length;\n      }).length;\n    }catch(e){\n      // console.warn(e)\n      return false;\n    }\n  });\n};\n\n/**\n * make USB extends EventEmitter\n */\nutil.inherits(USB, EventEmitter);\n\n/**\n * [open usb device]\n * @param  {Function} callback [description]\n * @return {[type]}            [description]\n */\nUSB.prototype.open = function (callback){\n\n  let self = this, counter = 0, index = 0;\n  this.device.open();\n\n  this.device.interfaces.forEach(function(iface){\n\n    (function(iface){\n\n      iface.setAltSetting(iface.altSetting, function(){\n\n        // http://libusb.sourceforge.net/api-1.0/group__dev.html#gab14d11ed6eac7519bb94795659d2c971\n        // libusb_kernel_driver_active / libusb_attach_kernel_driver / libusb_detach_kernel_driver : \"This functionality is not available on Windows.\"\n        if (\"win32\" !== os.platform()) {\n\n          if(iface.isKernelDriverActive()) {\n\n            try {\n              iface.detachKernelDriver();\n            } catch(e) {\n              console.error(\"[ERROR] Could not detatch kernel driver: %s\", e)\n            }\n\n          }\n\n        }\n\n        iface.claim(); // must be called before using any endpoints of this interface.\n        iface.endpoints.filter(function(endpoint){\n          if(endpoint.direction == 'out' && !self.endpoint) {\n            self.endpoint = endpoint;\n          }\n        });\n        if(self.endpoint) {\n          self.emit('connect', self.device);\n          callback && callback(null, self);\n        } else if(++counter === this.device.interfaces.length && !self.endpoint){\n          callback && callback(new Error('Can not find endpoint from printer'));\n        }\n\n      });\n\n    })(iface);\n\n  });\n\n  return this;\n  \n};\n\n/**\n * [function write]\n * @param  {[type]} data [description]\n * @return {[type]}      [description]\n */\nUSB.prototype.write = function(data, callback){\n  this.emit('data', data);\n  this.endpoint.transfer(data, callback);\n  return this;\n};\n\nUSB.prototype.close = function(callback){\n  this.emit('close', this.device);\n  this.device.close(callback);\n  return this;\n};\n\n/**\n * [exports description]\n * @type {[type]}\n */\nmodule.exports = USB;\n","/home/travis/build/npmtest/node-npmtest-escpos/node_modules/escpos/adapter.js":"'use strict';\nconst util         = require('util');\nconst EventEmitter = require('events');\n\n/**\n * [Adapter description]\n */\nfunction Adapter(){\n  EventEmitter.call(this);\n  return this;\n}\n\nutil.inherits(Adapter, EventEmitter);\n\n/**\n * [extends description]\n * @param  {[type]} ctor [description]\n * @return {[type]}      [description]\n */\nAdapter.extends = function(ctor){\n  // console.log(ctor);\n  util.inherits(ctor, Adapter);\n  return ctor;\n};\n\n/**\n * [open description]\n * @return {[type]} [description]\n */\nAdapter.prototype.open = function () {\n  throw new Error('NotImplementedException');\n  return this;\n};\n\n/**\n * [close description]\n * @return {[type]} [description]\n */\nAdapter.prototype.close = function () {\n  throw new Error('NotImplementedException');\n  return this;\n};\n\n/**\n * [write description]\n * @return {[type]} [description]\n */\nAdapter.prototype.write = function () {\n  throw new Error('NotImplementedException');\n  return this;\n};\n\n/**\n * [exports description]\n * @type {[type]}\n */\nmodule.exports = Adapter;","/home/travis/build/npmtest/node-npmtest-escpos/node_modules/escpos/commands.js":"/**\n * ESC/POS _ (Constants)\n */\nvar _ = {\n  LF  : '\\x0a',\n  FS  : '\\x1c',\n  FF  : '\\x0c',\n  GS  : '\\x1d',\n  DLE : '\\x10',\n  EOT : '\\x04',\n  NUL : '\\x00',\n  ESC : '\\x1b',\n  EOL : '\\n'\n};\n\n\n/**\n * [FEED_CONTROL_SEQUENCES Feed control sequences]\n * @type {Object}\n */\n_.FEED_CONTROL_SEQUENCES = {\n  CTL_LF  : '\\x0a',   // Print and line feed\n  CTL_FF  : '\\x0c',   // Form feed\n  CTL_CR  : '\\x0d',   // Carriage return\n  CTL_HT  : '\\x09',   // Horizontal tab\n  CTL_VT  : '\\x0b',   // Vertical tab\n};\n\n_.LINE_SPACING = {\n  LS_DEFAULT : '\\x1b\\x32',\n  LS_SET     : '\\x1b\\x33'\n};\n\n/**\n * [HARDWARE Printer hardware]\n * @type {Object}\n */\n_.HARDWARE = {\n  HW_INIT   : '\\x1b\\x40'         , // Clear data in buffer and reset modes\n  HW_SELECT : '\\x1b\\x3d\\x01'     , // Printer select\n  HW_RESET  : '\\x1b\\x3f\\x0a\\x00' , // Reset printer hardware\n};\n\n/**\n * [CASH_DRAWER Cash Drawer]\n * @type {Object}\n */\n_.CASH_DRAWER = {\n  CD_KICK_2 : '\\x1b\\x70\\x00'      , // Sends a pulse to pin 2 []\n  CD_KICK_5 : '\\x1b\\x70\\x01'      , // Sends a pulse to pin 5 []\n};\n\n/**\n * [MARGINS Margins sizes]\n * @type {Object}\n */\n_.MARGINS = {\n  BOTTOM:    '\\x1b\\x4f'           , // Fix bottom size\n  LEFT:      '\\x1b\\x6c'           , // Fix left size\n  RIGHT:     '\\x1b\\x51'           , // Fix right size\n};\n\n/**\n * [PAPER Paper]\n * @type {Object}\n */\n_.PAPER = {\n  PAPER_FULL_CUT  : '\\x1d\\x56\\x00' , // Full cut paper\n  PAPER_PART_CUT  : '\\x1d\\x56\\x01' , // Partial cut paper\n  PAPER_CUT_A     : '\\x1d\\x56\\x41' , // Partial cut paper\n  PAPER_CUT_B     : '\\x1d\\x56\\x42' , // Partial cut paper\n};\n\n/**\n * [TEXT_FORMAT Text format]\n * @type {Object}\n */\n_.TEXT_FORMAT = {\n\n  TXT_NORMAL      : '\\x1b\\x21\\x00', // Normal text\n  TXT_2HEIGHT     : '\\x1b\\x21\\x10', // Double height text\n  TXT_2WIDTH      : '\\x1b\\x21\\x20', // Double width text\n  TXT_4SQUARE     : '\\x1b\\x21\\x30', // Double width & height text\n\n  TXT_SIZE        : '\\x1d\\x21', // other sizes\n  TXT_HEIGHT      : {\n    1: '\\x00',\n    2: '\\x01',\n    3: '\\x02',\n    4: '\\x03',\n    5: '\\x04',\n    6: '\\x05',\n    7: '\\x06',\n    8: '\\x07'\n  },\n  TXT_WIDTH       : {\n    1: '\\x00',\n    2: '\\x10',\n    3: '\\x20',\n    4: '\\x30',\n    5: '\\x40',\n    6: '\\x50',\n    7: '\\x60',\n    8: '\\x70'\n  },\n\n  TXT_UNDERL_OFF  : '\\x1b\\x2d\\x00', // Underline font OFF\n  TXT_UNDERL_ON   : '\\x1b\\x2d\\x01', // Underline font 1-dot ON\n  TXT_UNDERL2_ON  : '\\x1b\\x2d\\x02', // Underline font 2-dot ON\n  TXT_BOLD_OFF    : '\\x1b\\x45\\x00', // Bold font OFF\n  TXT_BOLD_ON     : '\\x1b\\x45\\x01', // Bold font ON\n  TXT_ITALIC_OFF  : '\\x1b\\x35', // Italic font ON\n  TXT_ITALIC_ON   : '\\x1b\\x34', // Italic font ON\n\n  TXT_FONT_A      : '\\x1b\\x4d\\x00', // Font type A\n  TXT_FONT_B      : '\\x1b\\x4d\\x01', // Font type B\n  TXT_FONT_C      : '\\x1b\\x4d\\x02', // Font type C\n\n  TXT_ALIGN_LT    : '\\x1b\\x61\\x00', // Left justification\n  TXT_ALIGN_CT    : '\\x1b\\x61\\x01', // Centering\n  TXT_ALIGN_RT    : '\\x1b\\x61\\x02', // Right justification\n};\n\n/**\n * [BARCODE_FORMAT Barcode format]\n * @type {Object}\n */\n_.BARCODE_FORMAT = {\n  BARCODE_TXT_OFF : '\\x1d\\x48\\x00' , // HRI barcode chars OFF\n  BARCODE_TXT_ABV : '\\x1d\\x48\\x01' , // HRI barcode chars above\n  BARCODE_TXT_BLW : '\\x1d\\x48\\x02' , // HRI barcode chars below\n  BARCODE_TXT_BTH : '\\x1d\\x48\\x03' , // HRI barcode chars both above and below\n\n  BARCODE_FONT_A  : '\\x1d\\x66\\x00' , // Font type A for HRI barcode chars\n  BARCODE_FONT_B  : '\\x1d\\x66\\x01' , // Font type B for HRI barcode chars\n\n  BARCODE_HEIGHT  : '\\x1d\\x68\\x64' , // Barcode Height [1-255]\n  BARCODE_WIDTH   : '\\x1d\\x77\\x03' , // Barcode Width  [2-6]\n\n  BARCODE_UPC_A   : '\\x1d\\x6b\\x00' , // Barcode type UPC-A\n  BARCODE_UPC_E   : '\\x1d\\x6b\\x01' , // Barcode type UPC-E\n  BARCODE_EAN13   : '\\x1d\\x6b\\x02' , // Barcode type EAN13\n  BARCODE_EAN8    : '\\x1d\\x6b\\x03' , // Barcode type EAN8\n  BARCODE_CODE39  : '\\x1d\\x6b\\x04' , // Barcode type CODE39\n  BARCODE_ITF     : '\\x1d\\x6b\\x05' , // Barcode type ITF\n  BARCODE_NW7     : '\\x1d\\x6b\\x06' , // Barcode type NW7\n  BARCODE_CODE93  : '\\x1d\\x6b\\x07' , // Barcode type CODE93\n  BARCODE_CODE128 : '\\x1d\\x6b\\x08' , // Barcode type CODE128\n};\n\n/**\n * [CODE2D_FORMAT description]\n * @type {Object}\n */\n_.CODE2D_FORMAT = {\n  TYPE_PDF417     : _.GS  + 'Z' + '\\x00',\n  TYPE_DATAMATRIX : _.GS  + 'Z' + '\\x01',\n  TYPE_QR         : _.GS  + 'Z' + '\\x02',\n  CODE2D          : _.ESC + 'Z'         ,\n  QR_LEVEL_L      : 'L', // correct level 7%\n  QR_LEVEL_M      : 'M', // correct level 15%\n  QR_LEVEL_Q      : 'Q', // correct level 25%\n  QR_LEVEL_H      : 'H'  // correct level 30%\n};\n\n/**\n * [IMAGE_FORMAT Image format]\n * @type {Object}\n */\n_.IMAGE_FORMAT = {\n  S_RASTER_N      : '\\x1d\\x76\\x30\\x00' , // Set raster image normal size\n  S_RASTER_2W     : '\\x1d\\x76\\x30\\x01' , // Set raster image double width\n  S_RASTER_2H     : '\\x1d\\x76\\x30\\x02' , // Set raster image double height\n  S_RASTER_Q      : '\\x1d\\x76\\x30\\x03' , // Set raster image quadruple\n};\n\n/**\n * [BITMAP_FORMAT description]\n * @type {Object}\n */\n_.BITMAP_FORMAT = {\n  BITMAP_S8     : '\\x1b\\x2a\\x00',\n  BITMAP_D8     : '\\x1b\\x2a\\x01',\n  BITMAP_S24    : '\\x1b\\x2a\\x20',\n  BITMAP_D24    : '\\x1b\\x2a\\x21'\n};\n\n/**\n * [GSV0_FORMAT description]\n * @type {Object}\n */\n_.GSV0_FORMAT = {\n  GSV0_NORMAL   : '\\x1d\\x76\\x30\\x00',\n  GSV0_DW       : '\\x1d\\x76\\x30\\x01',\n  GSV0_DH       : '\\x1d\\x76\\x30\\x02',\n  GSV0_DWDH     : '\\x1d\\x76\\x30\\x03'\n};\n\n\n\n/**\n * [exports description]\n * @type {[type]}\n */\nmodule.exports = _;\n","/home/travis/build/npmtest/node-npmtest-escpos/node_modules/escpos/image.js":"'use strict';\nconst getPixels = require('get-pixels');\n\n/**\n * [Image description]\n * @param {[type]} pixels [description]\n */\nfunction Image(pixels){\n  if(!(this instanceof Image)) \n    return new Image(pixels);\n  this.pixels = pixels;\n\n  this.data = [];\n  function rgb(pixel) {\n    return {\n      r: pixel[0],\n      g: pixel[1],\n      b: pixel[2],\n      a: pixel[3]\n    };\n  };\n\n  var self = this;\n  for(var i=0;i<this.pixels.data.length;i+=this.size.colors){\n    this.data.push(rgb(new Array(this.size.colors).fill(0).map(function(_, b){\n      return self.pixels.data[ i + b ];\n    })));\n  };\n\n  this.data = this.data.map(function(pixel){\n    if(pixel.a == 0) return 0;\n    return pixel.r !== 0xFF || pixel.g !== 0xFF || pixel.b !== 0xFF ? 1 : 0;\n  });\n\n};\n\n/**\n * [load description]\n * @param  {[type]}   url      [description]\n * @param  {[type]}   type     [description]\n * @param  {Function} callback [description]\n * @return {[type]}            [description]\n */\nImage.load = function(url, type, callback){\n  if(typeof type == 'function'){\n    callback = type;\n    type = null;\n  }\n  getPixels(url, type, function(err, pixels){\n    if(err) return callback(err);\n    callback(new Image(pixels));\n  });\n};\n\n/**\n * [description]\n * @return {[type]}     [description]\n */\nImage.prototype.__defineGetter__('size', function(){\n  return {\n    width : this.pixels.shape[0],\n    height: this.pixels.shape[1],\n    colors: this.pixels.shape[2],\n  };\n});\n\n/**\n * [toBitmap description]\n * @param  {[type]} density [description]\n * @return {[type]}         [description]\n */\nImage.prototype.toBitmap = function(density) {\n  density = density || 24;\n\n  var ld, result = [];\n  var x, y, b, l, i;\n  var c = density / 8;\n\n  // n blocks of lines\n  var n = Math.ceil(this.size.height / density);\n\n  for (y = 0; y < n; y++) {\n    // line data\n    ld = result[y] = [];\n\n    for (x = 0; x < this.size.width; x++) {\n\n      for (b = 0; b < density; b++) {\n        i = x * c + (b >> 3);\n\n        if (ld[i] === undefined) {\n          ld[i] = 0;\n        }\n\n        l = y * density + b;\n        if (l < this.size.height) {\n          if (this.data[l * this.size.width + x]) {\n            ld[i] += (0x80 >> (b & 0x7));\n          }\n        }\n      }\n    }\n  }\n\n  return {\n    data: result,\n    density: density\n  };\n};\n/**\n * [toRaster description]\n * @return {[type]} [description]\n */\nImage.prototype.toRaster = function () {\n  var result = [];\n  var width  = this.size.width;\n  var height = this.size.height;\n  var data   = this.data;\n\n  // n blocks of lines\n  var n = Math.ceil(width / 8);\n  var x, y, b, c, i;\n\n  for (y = 0; y < height; y++) {\n\n    for (x = 0; x < n; x++) {\n\n      for (b = 0; b < 8; b++) {\n        i = x * 8 + b;\n\n        if (result[y * n + x] === undefined) {\n          result[y * n + x] = 0;\n        }\n\n        c = x * 8 + b;\n        if (c < width) {\n          if (data[y * width + i]) {\n            result[y * n + x] += (0x80 >> (b & 0x7));\n          }\n        }\n      }\n    }\n  }\n  return {\n    data: result,\n    width: n,\n    height: height\n  };\n}\n\n/**\n * [exports description]\n * @type {[type]}\n */\nmodule.exports = Image;","/home/travis/build/npmtest/node-npmtest-escpos/node_modules/escpos/printer.js":"'use strict';\nconst util         = require('util');\nconst qr           = require('qr-image');\nconst iconv        = require('iconv-lite');\nconst getPixels    = require('get-pixels');\nconst Buffer       = require('mutable-buffer');\nconst EventEmitter = require('events');\nconst Image        = require('./image');\nconst _            = require('./commands');\n\n/**\n * [function ESC/POS Printer]\n * @param  {[Adapter]} adapter [eg: usb, network, or serialport]\n * @return {[Printer]} printer  [the escpos printer instance]\n */\nfunction Printer(adapter){\n  if (!(this instanceof Printer)) {\n    return new Printer(adapter);\n  }\n  var self = this;\n  EventEmitter.call(this);\n  this.adapter = adapter;\n  this.buffer = new Buffer();\n};\n\n/**\n * Printer extends EventEmitter\n */\nutil.inherits(Printer, EventEmitter);\n\n/**\n * Fix bottom margin\n * @param  {[String]} size\n * @return printer instance\n */\nPrinter.prototype.marginBottom = function(size){\n  this.buffer.write(_.MARGINS.BOTTOM);\n  this.buffer.writeUInt8(size);\n  return this;\n};\n\n/**\n * Fix left margin\n * @param  {[String]} size\n * @return printer instance\n */\nPrinter.prototype.marginLeft = function(size){\n  this.buffer.write(_.MARGINS.LEFT);\n  this.buffer.writeUInt8(size);\n  return this;\n};\n\n/**\n * Fix right margin\n * @param  {[String]} size\n * @return printer instance\n */\nPrinter.prototype.marginRight = function(size){\n  this.buffer.write(_.MARGINS.RIGHT);\n  this.buffer.writeUInt8(size);\n  return this;\n};\n\n/**\n * Send data to hardware and flush buffer\n * @param  {Function} callback\n * @return printer instance\n */\nPrinter.prototype.flush = function(callback){\n  var buf = this.buffer.flush();\n  this.adapter.write(buf, callback);\n  return this;\n};\n/**\n * [function print]\n * @param  {[String]}  content  [description]\n * @param  {[String]}  encoding [description]\n * @return printer instance\n */\nPrinter.prototype.print = function(content){\n  this.buffer.write(content);\n  return this;\n};\n/**\n * [function println]\n * @param  {[String]}  content  [description]\n * @param  {[String]}  encoding [description]\n * @return printer instance\n */\nPrinter.prototype.println = function(content){\n  return this.print([ content, _.EOL ].join(''));\n};\n\n/**\n * [function Print alpha-numeric text]\n * @param  {[String]}  content  [description]\n * @param  {[String]}  encoding [description]\n * @return printer instance\n */\nPrinter.prototype.text = function(content, encoding){\n  return this.print(iconv.encode(content + _.EOL, encoding || 'GB18030'));\n};\n\n/**\n * [line feed]\n * @param  {[type]}    lines   [description]\n * @return {[Printer]} printer [description]\n */\nPrinter.prototype.feed = function (n) {\n  this.buffer.write(new Array(n || 1).fill(_.EOL).join(''));\n  return this.flush();\n};\n\n/**\n * [feed control sequences]\n * @param  {[type]}    ctrl     [description]\n * @return printer instance\n */\nPrinter.prototype.control = function(ctrl){\n  this.buffer.write(_.FEED_CONTROL_SEQUENCES[\n    'CTL_' + ctrl.toUpperCase()\n  ]);\n  return this;\n};\n/**\n * [text align]\n * @param  {[type]}    align    [description]\n * @return printer instance\n */\nPrinter.prototype.align = function(align){\n  this.buffer.write(_.TEXT_FORMAT[\n    'TXT_ALIGN_' + align.toUpperCase()\n  ]);\n  return this;\n};\n/**\n * [font family]\n * @param  {[type]}    family  [description]\n * @return {[Printer]} printer [description]\n */\nPrinter.prototype.font = function(family){\n  this.buffer.write(_.TEXT_FORMAT[\n    'TXT_FONT_' + family.toUpperCase()\n  ]);\n  return this;\n};\n/**\n * [font style]\n * @param  {[type]}    type     [description]\n * @return printer instance\n */\nPrinter.prototype.style = function(type){\n  switch(type.toUpperCase()){\n\n    case 'B':\n      this.buffer.write(_.TEXT_FORMAT.TXT_BOLD_ON);\n      this.buffer.write(_.TEXT_FORMAT.TXT_ITALIC_OFF);\n      this.buffer.write(_.TEXT_FORMAT.TXT_UNDERL_OFF);\n      break;\n    case 'I':\n      this.buffer.write(_.TEXT_FORMAT.TXT_BOLD_OFF);\n      this.buffer.write(_.TEXT_FORMAT.TXT_ITALIC_ON);\n      this.buffer.write(_.TEXT_FORMAT.TXT_UNDERL_OFF);\n      break;\n    case 'U':\n      this.buffer.write(_.TEXT_FORMAT.TXT_BOLD_OFF);\n      this.buffer.write(_.TEXT_FORMAT.TXT_ITALIC_OFF);\n      this.buffer.write(_.TEXT_FORMAT.TXT_UNDERL_ON);\n      break;\n    case 'U2':\n      this.buffer.write(_.TEXT_FORMAT.TXT_BOLD_OFF);\n      this.buffer.write(_.TEXT_FORMAT.TXT_ITALIC_OFF);\n      this.buffer.write(_.TEXT_FORMAT.TXT_UNDERL2_ON);\n      break;\n\n    case 'BI':\n      this.buffer.write(_.TEXT_FORMAT.TXT_BOLD_ON);\n      this.buffer.write(_.TEXT_FORMAT.TXT_ITALIC_ON);\n      this.buffer.write(_.TEXT_FORMAT.TXT_UNDERL_OFF);\n      break;\n    case 'BIU':\n      this.buffer.write(_.TEXT_FORMAT.TXT_BOLD_ON);\n      this.buffer.write(_.TEXT_FORMAT.TXT_ITALIC_ON);\n      this.buffer.write(_.TEXT_FORMAT.TXT_UNDERL_ON);\n      break;\n    case 'BIU2':\n      this.buffer.write(_.TEXT_FORMAT.TXT_BOLD_ON);\n      this.buffer.write(_.TEXT_FORMAT.TXT_ITALIC_ON);\n      this.buffer.write(_.TEXT_FORMAT.TXT_UNDERL2_ON);\n      break;\n    case 'BU':\n      this.buffer.write(_.TEXT_FORMAT.TXT_BOLD_ON);\n      this.buffer.write(_.TEXT_FORMAT.TXT_ITALIC_OFF);\n      this.buffer.write(_.TEXT_FORMAT.TXT_UNDERL_ON);\n      break;\n    case 'BU2':\n      this.buffer.write(_.TEXT_FORMAT.TXT_BOLD_ON);\n      this.buffer.write(_.TEXT_FORMAT.TXT_ITALIC_OFF);\n      this.buffer.write(_.TEXT_FORMAT.TXT_UNDERL2_ON);\n      break;\n    case 'IU':\n      this.buffer.write(_.TEXT_FORMAT.TXT_BOLD_OFF);\n      this.buffer.write(_.TEXT_FORMAT.TXT_ITALIC_ON);\n      this.buffer.write(_.TEXT_FORMAT.TXT_UNDERL_ON);\n      break;\n    case 'IU2':\n      this.buffer.write(_.TEXT_FORMAT.TXT_BOLD_OFF);\n      this.buffer.write(_.TEXT_FORMAT.TXT_ITALIC_ON);\n      this.buffer.write(_.TEXT_FORMAT.TXT_UNDERL2_ON);\n      break;\n\n    case 'NORMAL':\n    default:\n      this.buffer.write(_.TEXT_FORMAT.TXT_BOLD_OFF);\n      this.buffer.write(_.TEXT_FORMAT.TXT_ITALIC_OFF);\n      this.buffer.write(_.TEXT_FORMAT.TXT_UNDERL_OFF);\n      break;\n\n  }\n  return this;\n};\n\n/**\n * [font size]\n * @param  {[String]}  width   [description]\n * @param  {[String]}  height  [description]\n * @return {[Printer]} printer [description]\n */\nPrinter.prototype.size = function(width, height) {\n\n  if (2 >= width && 2 >= height) {\n\n    this.buffer.write(_.TEXT_FORMAT.TXT_NORMAL);\n\n    if (2 == width && 2 == height) {\n      this.buffer.write(_.TEXT_FORMAT.TXT_4SQUARE);\n    }\n    else if (1 == width && 2 == height) {\n      this.buffer.write(_.TEXT_FORMAT.TXT_2HEIGHT);\n    }\n    else if (2 == width && 1 == height) {\n      this.buffer.write(_.TEXT_FORMAT.TXT_2WIDTH);\n    }\n\n  }\n  else {\n\n    this.buffer.write(_.TEXT_FORMAT.TXT_SIZE);\n    this.buffer.write(_.TEXT_FORMAT.TXT_WIDTH[(8 >= width) ? width : 8]);\n    this.buffer.write(_.TEXT_FORMAT.TXT_HEIGHT[(8 >= height) ? height : 8]);\n\n  }\n\n  return this;\n\n};\n\n/**\n * [set line spacing]\n * @param  {[type]} n [description]\n * @return {[type]}   [description]\n */\nPrinter.prototype.lineSpace = function(n) {\n  if (n === undefined || n === null) {\n    this.buffer.write(_.LINE_SPACING.LS_DEFAULT);\n  } else {\n    this.buffer.write(_.LINE_SPACING.LS_SET);\n    this.buffer.writeUInt8(n);\n  }\n  return this;\n};\n\n/**\n * [hardware]\n * @param  {[type]}    hw       [description]\n * @return printer instance\n */\nPrinter.prototype.hardware = function(hw){\n  this.buffer.write(_.HARDWARE[ 'HW_'+ hw ]);\n  return this.flush();\n};\n/**\n * [barcode]\n * @param  {[type]}    code     [description]\n * @param  {[type]}    type     [description]\n * @param  {[type]}    width    [description]\n * @param  {[type]}    height   [description]\n * @param  {[type]}    position [description]\n * @param  {[type]}    font     [description]\n * @return printer instance\n */\nPrinter.prototype.barcode = function(code, type, width, height, position, font){\n  if(width >= 1 || width <= 255){\n    this.buffer.write(_.BARCODE_FORMAT.BARCODE_WIDTH);\n  }\n  if(height >=2  || height <= 6){\n    this.buffer.write(_.BARCODE_FORMAT.BARCODE_HEIGHT);\n  }\n  this.buffer.write(_.BARCODE_FORMAT[\n    'BARCODE_FONT_' + (font || 'A').toUpperCase()\n  ]);\n  this.buffer.write(_.BARCODE_FORMAT[\n    'BARCODE_TXT_' + (position || 'BLW').toUpperCase()\n  ]);\n  this.buffer.write(_.BARCODE_FORMAT[\n    'BARCODE_' + ((type || 'EAN13').replace('-', '_').toUpperCase())\n  ]);\n  this.buffer.write(code);\n  return this;\n};\n\n/**\n * [print qrcode]\n * @param  {[type]} code    [description]\n * @param  {[type]} version [description]\n * @param  {[type]} level   [description]\n * @param  {[type]} size    [description]\n * @return {[type]}         [description]\n */\nPrinter.prototype.qrcode = function(code, version, level, size){\n  this.buffer.write(_.CODE2D_FORMAT.TYPE_QR);\n  this.buffer.write(_.CODE2D_FORMAT.CODE2D);\n  this.buffer.writeUInt8(version || 3);\n  this.buffer.write(_.CODE2D_FORMAT[\n    'QR_LEVEL_' + (level || 'L').toUpperCase()\n  ]);\n  this.buffer.writeUInt8(size || 6);\n  this.buffer.writeUInt16LE(code.length);\n  this.buffer.write(code);\n  return this;\n};\n\n/**\n * [print qrcode image]\n * @param  {[type]}   content  [description]\n * @param  {[type]}   options  [description]\n * @param  {Function} callback [description]\n * @return {[type]}            [description]\n */\nPrinter.prototype.qrimage = function(content, options, callback){\n  var self = this;\n  if(typeof options == 'function'){\n    callback = options;\n    options = null;\n  }\n  options = options || { type: 'png', mode: 'dhdw' };\n  var buffer = qr.imageSync(content, options);\n  var type = [ 'image', options.type ].join('/');\n  getPixels(buffer, type, function (err, pixels) {\n    if(err) return callback && callback(err);\n    self.raster(new Image(pixels), options.mode);\n    callback && callback.call(self, null, self);\n  });\n  return this;\n};\n\n/**\n * [image description]\n * @param  {[type]} image   [description]\n * @param  {[type]} density [description]\n * @return {[type]}         [description]\n */\nPrinter.prototype.image = function(image, density){\n  if(!(image instanceof Image)) \n    throw new TypeError('Only escpos.Image supported');\n  density = density || 'd24';\n  var n = !!~[ 'd8', 's8' ].indexOf(density) ? 1 : 3;\n  var header = _.BITMAP_FORMAT['BITMAP_' + density.toUpperCase()];\n  var bitmap = image.toBitmap(n * 8);\n  var self = this;\n  this.lineSpace(0); // set line spacing to 0\n  bitmap.data.forEach(function (line) {\n    self.buffer.write(header);\n    self.buffer.writeUInt16LE(line.length / n);\n    self.buffer.write(line);\n    self.buffer.write(_.EOL);\n  });\n  // restore line spacing to default\n  return this.lineSpace();\n};\n\n/**\n * [raster description]\n * @param  {[type]} image [description]\n * @param  {[type]} mode  [description]\n * @return {[type]}       [description]\n */\nPrinter.prototype.raster = function (image, mode) {\n  if(!(image instanceof Image)) \n    throw new TypeError('Only escpos.Image supported');\n  mode = mode || 'normal';\n  if (mode === 'dhdw' || \n      mode === 'dwh'  || \n      mode === 'dhw') mode = 'dwdh';\n  var raster = image.toRaster();\n  var header = _.GSV0_FORMAT['GSV0_' + mode.toUpperCase()];\n  this.buffer.write(header);\n  this.buffer.writeUInt16LE(raster.width);\n  this.buffer.writeUInt16LE(raster.height);\n  this.buffer.write(raster.data);\n  return this;\n};\n\n/**\n * [function Cut paper]\n * @param  {[type]} part [description]\n * @return printer instance\n */\nPrinter.prototype.cut = function(part, feed){\n  this.feed(feed || 3);\n  this.buffer.write(_.PAPER[\n    part ? 'PAPER_PART_CUT' : 'PAPER_FULL_CUT'\n  ]);\n  return this.flush();\n};\n\n/**\n * [function Send pulse to kick the cash drawer]\n * @param  {[type]} pin [description]\n * @return printer instance\n */\nPrinter.prototype.cashdraw = function(pin){\n  this.buffer.write(_.CASH_DRAWER[\n    'CD_KICK_' + (pin || 2)\n  ]);\n  return this.flush();\n};\n\n/**\n * [close description]\n * @param  {Function} callback [description]\n * @return {[type]}            [description]\n */\nPrinter.prototype.close = function(callback){\n  var self = this;\n  return this.flush(function(){\n    self.adapter.close(callback);\n  });\n};\n\n/**\n * [exports description]\n * @type {[type]}\n */\nmodule.exports = Printer;\n","/home/travis/build/npmtest/node-npmtest-escpos/node_modules/escpos/adapter/console.js":"'use strict';\n/**\n * [stdout description]\n * @param  {[type]} data [description]\n * @param  {[type]} bit  [description]\n * @return {[type]}      [description]\n */\nfunction stdout(data, bit){\n  bit = bit || 8;\n  for(var i=0;i < data.length;i+= bit){\n    var arr = [];\n    for(var j=0;j<bit && i+j<data.length;j++) \n      arr.push(data[i + j]);\n    arr = arr.map(function(b){\n      return b.toString(16).toUpperCase()\n    }).map(function(b){\n      if(b.length == 1) b = '0' + b;\n      return b;\n    })\n    \n    console.log(arr.join(' '));\n  }\n  console.log();\n}\n\n/**\n * [Console description]\n */\nfunction Console(handler){\n  this.handler = handler || stdout;\n};\n/**\n * [open description]\n * @param  {Function} callback [description]\n * @return {[type]}            [description]\n */\nConsole.prototype.open = function(callback){\n  callback && callback();\n};\n/**\n * [write description]\n * @param  {[type]} data [description]\n * @param  {[type]} bit  [description]\n * @return {[type]}      [description]\n */\nConsole.prototype.write = function(data){\n  this.handler && this.handler(data);\n};\n\n/**\n * [exports description]\n * @type {[type]}\n */\nmodule.exports = Console;\n","/home/travis/build/npmtest/node-npmtest-escpos/node_modules/escpos/adapter/network.js":"'use strict';\nconst net           = require('net');\nconst util          = require('util');\nconst EventEmitter  = require('events');\n/**\n * Network Adapter\n * @param {[type]} address\n * @param {[type]} port\n */\nfunction Network(address, port){\n  EventEmitter.call(this);\n  this.address = address;\n  this.port = port || 9100;\n  this.device = new net.Socket();\n  return this;\n};\n\nutil.inherits(Network, EventEmitter);\n\n/**\n * connect to remote device\n * @praram {[type]} callback\n * @return\n */\nNetwork.prototype.open = function(callback){\n  var self = this;\n  //connect to net printer by socket (port,ip)\n  this.device.on(\"error\", (err) => {\n    callback && callback(err, self.device);\n  }).connect(this.port, this.address, function(err){\n    self.emit('connect', self.device);\n    callback && callback(err, self.device);\n  });\n  return this;\n};\n\n/**\n * write data to printer\n * @param {[type]} data -- byte data\n * @return \n */\nNetwork.prototype.write = function(data, callback){\n  this.device.write(data, callback);\n  return this;\n};\n\n/**\n * [close description]\n * @param  {Function} callback [description]\n * @return {[type]}            [description]\n */\nNetwork.prototype.close = function(callback){\n  if(this.device){\n    this.device.destroy();\n    this.device = null;\n  }\n  this.emit('disconnect', this.device);\n  callback && callback(null, this.device);\n  return this;\n}\n\nmodule.exports = Network;\n","/home/travis/build/npmtest/node-npmtest-escpos/node_modules/escpos/adapter/serial.js":"'use strict';\nconst util          = require('util');\nconst EventEmitter  = require('events');\nconst SerialPort    = require('serialport');\n\n/**\n * SerialPort device\n * @param {[type]} port\n * @param {[type]} options\n */\nfunction Serial(port, options){\n  var self = this;\n  options = options || { \n    baudrate: 9600,\n    autoOpen: false\n  };\n  this.device = new SerialPort(port, options);\n  this.device.on('close', function() {\n    self.emit('disconnect', self.device);\n    self.device = null;\n  });\n  EventEmitter.call(this);\n  return this;\n};\n\nutil.inherits(Serial, EventEmitter);\n\n/**\n * open deivce\n * @param  {Function} callback\n * @return {[type]}\n */\nSerial.prototype.open = function(callback){\n  this.device.open(callback);\n  return this;\n};\n\n/**\n * write data to serialport device\n * @param  {[type]}   buf      [description]\n * @param  {Function} callback [description]\n * @return {[type]}            [description]\n */\nSerial.prototype.write = function(data, callback){\n  this.device.write(data, callback);\n  return this;\n};\n\n/**\n * close device\n * @return {[type]} [description]\n */\nSerial.prototype.close = function(callback) {\n  var self = this;\n  this.device.drain(function(err) {\n    self.device.close();\n    self.device = null;\n    callback && callback(err, self.device);\n  });\n  return this;\n};\n\n/**\n * expose\n */\nmodule.exports = Serial;\n"}